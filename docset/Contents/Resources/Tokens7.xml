<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/GMTheme.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/GMTheme</TokenIdentifier>
			<Abstract type="html">GMTheme represents a syntax highlighting theme. The responsibilities of this class include loading a
representation of a theme from a stored file system location as well as actually formatting strings.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>
			
			<NodeRef refid="7"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GMTheme/themeAtURL:</TokenIdentifier>
			<Abstract type="html">Loads a theme plist from a given URL.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>			
			
			<Declaration>+ (id)themeAtURL:(NSURL *)url</Declaration>
			<Parameters>
				<Parameter>
					<Name>url</Name>
					<Abstract type="html">The accessible url where to find the theme declaration.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns a new GMTheme instance if the file was found and parsed properly, otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/themeAtURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GMTheme/themeAtPath:</TokenIdentifier>
			<Abstract type="html">Loads a theme plist from a given path.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>			
			
			<Declaration>+ (id)themeAtPath:(NSString *)path</Declaration>
			<Parameters>
				<Parameter>
					<Name>path</Name>
					<Abstract type="html">The accessible filesystem path where to find the theme declaration.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns a new GMTheme instance if the file was found and parsed properly, otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/themeAtPath:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/GMTheme/themeFromBundleWithName:</TokenIdentifier>
			<Abstract type="html">Loads a theme plist from the application bundle.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>			
			
			<Declaration>+ (id)themeFromBundleWithName:(NSString *)name</Declaration>
			<Parameters>
				<Parameter>
					<Name>name</Name>
					<Abstract type="html">The name of the theme.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns a new GMTheme dictionary instance if the file was found and parsed properly, otherwise nil.</Abstract></ReturnValue>
			<Anchor>//api/name/themeFromBundleWithName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GMTheme/initWithDictionary:</TokenIdentifier>
			<Abstract type="html">Processes a dictionary, turning certain key value pairs into the appropriate data types for NSAttributedString.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>			
			
			<Declaration>- (id)initWithDictionary:(NSDictionary *)dict</Declaration>
			<Parameters>
				<Parameter>
					<Name>dict</Name>
					<Abstract type="html">The theme definition dictionary.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Returns a new GMTheme.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithDictionary:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GMTheme/setValue:forAttribute:inToken:</TokenIdentifier>
			<Abstract type="html">Modifies a property for a token without processing.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>			
			
			<Declaration>- (void)setValue:(id)value forAttribute:(NSString *)attribute inToken:(NSString *)token</Declaration>
			<Parameters>
				<Parameter>
					<Name>value</Name>
					<Abstract type="html">The value of the attribute.</Abstract>
				</Parameter><Parameter>
					<Name>attribute</Name>
					<Abstract type="html">A key that will go into NSAttributedString&apos;s attributes property.</Abstract>
				</Parameter><Parameter>
					<Name>token</Name>
					<Abstract type="html">The token you want this setting to apply to. Use * to modify the defaultAttributes.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setValue:forAttribute:inToken:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GMTheme/formatString:forToken:</TokenIdentifier>
			<Abstract type="html">Returns a formatted string based on the theme settings for the given token.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>			
			
			<Declaration>- (NSAttributedString *)formatString:(NSAttributedString *)string forToken:(NSString *)token</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">The input string that should be formatted.</Abstract>
				</Parameter><Parameter>
					<Name>token</Name>
					<Abstract type="html">The name of the token which should match the language definition.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An attributed string with appropriate formatting applied.</Abstract></ReturnValue>
			<Anchor>//api/name/formatString:forToken:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/GMTheme/defaultAttributes</TokenIdentifier>
			<Abstract type="html">Returns the attributes that should be used for the default string.</Abstract>
			<DeclaredIn>GMTheme.h</DeclaredIn>			
			
			<Declaration>- (NSDictionary *)defaultAttributes</Declaration>
			
			<ReturnValue><Abstract type="html">A dictionary of attributes that go into NSAttributedString</Abstract></ReturnValue>
			<Anchor>//api/name/defaultAttributes</Anchor>
		</Token>
		
	</File>
</Tokens>